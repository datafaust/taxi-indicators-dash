{"version":3,"sources":["components/selector.module.css","components/dateInput.module.css","components/Graph.js","components/Selector.js","components/DateInput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","graph","props","style","backgroundColor","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","angle","textAnchor","tick","fontSize","type","stroke","graphColors","green","activeDot","r","yellow","hv","lx","lv","bc","selector","onChange","handleSelect","className","classes","selectChoices","tpd","ud","uv","dateInput","date1","name","handleDateInput","App","compare","a","b","processGraph","data_set","variable","console","log","state","selectInput","result","Object","values","reduce","o","setState","e","target","value","updateData","handleSlider","sliderInput","my_data","textStyles","textAlign","backgroundStyles","backgroundImage","backgroundPosition","map","item","Date","parse","replace","sort","this","Selector","DateInput","color","outlineColor","Graph","filter","d","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eeebc612.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"selector_selector__1dEzO\",\"select-css\":\"selector_select-css__22F3N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"date1\":\"dateInput_date1__y9NRi\"};","import React, { Component } from 'react';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n \n  \n  \n  const graph = ( props ) => {\n\n      return (\n          <div style={{backgroundColor: \"#FAFAD2\"}}\n          >\n          <ResponsiveContainer width = \"100%\" height={450} >\n            <LineChart \n                data={props.data}\n                margin={{top: 5, right: 30, left: 20, bottom: 5}}>\n                <CartesianGrid strokeDasharray=\"4 4\" />\n                <XAxis dataKey=\"name\" angle={0} textAnchor=\"end\" tick={{fontSize:13}}/>\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"Green\" stroke={props.graphColors.green}  activeDot={{ r: 8 }} />\n                <Line type=\"monotone\" dataKey=\"Yellow\" stroke={props.graphColors.yellow} />\n                <Line type=\"monotone\" dataKey=\"HighVolume\" stroke={props.graphColors.hv} />\n                <Line type=\"monotone\" dataKey=\"LuxLimo\" stroke={props.graphColors.lx} />\n                <Line type=\"monotone\" dataKey=\"Livery\" stroke={props.graphColors.lv}/>\n                <Line type=\"monotone\" dataKey=\"BlackCar\" stroke={props.graphColors.bc} />\n            </LineChart> \n          </ResponsiveContainer>\n          </div>\n      )\n  };\n  \n  export default graph;\n\n\n\n\n\n/*\n  class graph extends Component {\n    render() {\n    let my_data = this.props.data\n        return (\n            <div>\n                <LineChart\n                width={800}\n                height={600}\n                data={my_data}\n                margin={{top: 5, right: 30, left: 20, bottom: 5}}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey={my_data.Green} activeDot={{ r: 8 }} />\n      </LineChart> \n            </div>\n        );\n    }\n}\n\nexport default graph;\n\n\n**/","import React from 'react';\nimport classes from './selector.module.css'\n\nconst selector = ( props ) => {\n\n    return (\n\n            <select \n                onChange={props.handleSelect} \n                className={classes.selector} >\n                <option>{props.selectChoices.tpd}</option>\n                <option>{props.selectChoices.ud}</option>\n                <option>{props.selectChoices.uv}</option>\n            </select>\n \n    )\n};\n\nexport default selector;","import React from 'react';\nimport classes from './dateInput.module.css'\n//import './Slider.css';\n\nconst dateInput = (props) => {\n    return(\n        //<div style={{\"marginLeft\": \"30%\"}} >\n        <input className={classes.date1} type=\"date\" name=\"bday\" onChange={props.handleDateInput} />\n        //</div>\n    )\n};\n\nexport default dateInput;\n","\nimport React, { Component } from 'react';\n//import {ResponsiveLine} from \"nivo\"\n//import my_data from './data/sampleTest.json'\nimport my_data from './data/csvjson.json';\n//import my_data from './data/test.json';\n//import my_data from './data/nivoTest.json';\n//import {XYPlot, XAxis, YAxis, HorizontalGridLines, LineSeries, VerticalGridLines, LineMarkSeries} from 'react-vis';\nimport Graph from './components/Graph'\nimport Selector from './components/Selector'\n//import Slider from './components/Slider'\nimport DateInput from './components/DateInput'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n     data:[],\n     graphColors : {\n        yellow: \"\t#FFA500\",\n        green:\"\t#006400\",\n        bc: \"#000000\",\n        hv: \"#FF1493\",\n        lx: \"#000080\",\n        lv: \"\t#FF0000\"\n\n     },\n     selectChoices: {\n        tpd: \"Trips Per Day\",\n        ud: \"Unique Drivers\",\n        uv: \"Unique Vehicles\"\n     },\n     selectInput: \"Trips Per Day\",\n     dateInput: \"2018-06-01\"\n  }\n  }\n\n  componentDidMount() {  \n    my_data.map(item => {item[\"Month/Year\"] = item[\"Month/Year\"] + '-01'; return Date.parse(item)})\n    my_data.map(item => {item[\"Trips Per Day\"] = item[\"Trips Per Day\"].replace(\",\",\"\"); return item})\n    my_data.map(item => {item[\"Unique Drivers\"] = item[\"Unique Drivers\"].replace(\",\",\"\"); return item})\n    my_data.map(item => {item[\"Unique Vehicles\"] = item[\"Unique Vehicles\"].replace(\",\",\"\"); return item}) \n    my_data.sort( this.compare ); \n    this.setState({data: my_data})\n    this.processGraph(my_data, this.state.selectInput)\n  }\n\n\n  compare = ( a, b ) => {\n    if ( a[\"Month/Year\"] < b[\"Month/Year\"] ){\n      return -1;\n    }\n    if ( a[\"Month/Year\"] > b[\"Month/Year\"]){\n      return 1;\n    }\n    return 0;\n  }\n\n  processGraph = (data_set, variable) => {\n\n    // track our inputs\n    console.log(this.state.dateInput)\n    console.log(this.state.selectInput)\n    console.log(\"state data\", this.state.data)\n    //filter data by date\n    let result = data_set;\n\n    result = Object.values(result.reduce((r, o) => {\n    var name = o[\"Month/Year\"];\n  //var group = o[\"group one\"];\n    r[name] = r[name] || { name };    \n    r[name][{ \"Green\": 'Green',\n            \"Yellow\": 'Yellow',\n            \"FHV - High Volume\": 'HighVolume',\n            \"FHV - Black Car\": \"BlackCar\",\n            \"FHV - Livery\": \"Livery\",\n            \"FHV - Lux Limo\": \"LuxLimo\"\n          }[o[[\"License Class\"]]]] = o[variable];\n     return r;\n    }, {}));\n    console.log(\"final\", result);\n\n    //final result is sent to the data\n    this.setState({data : result});\n  }\n\n  handleSelect = (e) => {\n    console.log(e.target.value);\n    this.setState({selectInput: e.target.value}) // update state with new filtered variable\n    this.updateData();\n    //this.processGraph(this.state.selectInput)\n    //this.processGraph(e.target.value)\n  }\n\n  handleSlider = (e) => {\n    console.log(e.target.value);\n    this.setState({sliderInput:e.target.value}) //update state with the new slider values\n    //this.updateData();\n  }\n\n  handleDateInput = (e) => {\n    console.log(e.target.value);\n    this.setState({dateInput:e.target.value}) //update state with the new date value\n    //this.updateData();\n    //this.processGraph(e.target.value)\n  }\n\n  updateData = () => {\n    //console.log(this.state.data);\n    this.processGraph(my_data, this.state.selectInput);\n  }\n\n  textStyles = {\n    textAlign: \"center\"\n  }\n\n  backgroundStyles = {\n    backgroundImage: \"url('https://cdn1.vectorstock.com/i/1000x1000/01/20/taxi-city-background-vector-2140120.jpg')\",\n    backgroundPosition: \"5px -160px\"\n  }\n\n  render() {\n    return (\n      <div style={this.backgroundStyles}>\n        <h2 style={this.textStyles}>Quick Dash</h2>\n        <p style={this.textStyles}>\n          <b>\n            Quick Dash was built as a practice app for data visualization in react, enjoy . . . \n          </b>\n        </p>\n        <p style={this.textStyles}><b>Choose your Metric</b></p>\n       <Selector \n          selectChoices = {this.state.selectChoices}\n          handleSelect = {this.handleSelect}/>\n        \n        <p style={this.textStyles}><b>Choose a Start Date</b></p>\n       <DateInput handleDateInput = {this.handleDateInput} />\n        <br/>\n        <br/>\n        <h2 style = {{textAlign:\"center\",\n                      //marginLeft:\"25%\",\n                      //marginRight: \"55%\",\n                      color:\"white\",\n                      outlineColor:\"blue\"}}\n        >\n        {`${this.state.selectInput} from ${this.state.dateInput} Onward`}\n        </h2>\n       <Graph data = {this.state.data.filter(d => {return (d['name'] >= this.state.dateInput);})} \n              graphColors={this.state.graphColors}/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n/**\n * \n *  <button onChange={this.checkData}>click me</button>\n        <XYPlot width={400} height={300}><XAxis/><YAxis/>\n          <HorizontalGridLines />\n          <VerticalGridLines />\n          <LineMarkSeries data={this.state.data} />\n        </XYPlot>\n * \n * \n * \n *  checkData = () => {\n  //  my_data.map(e=> {\n  //    console.log(this.state.secondData)\n  //  })\n  this.state.secondData.map(e=> {\n    console.log(e)\n  })\n  }\n\n  pushData = () => {\n    my_data.map(e=> {\n      this.state.secondData.push.apply(this.state.secondData, e['Month/Year'])\n    })\n  }\n *    <button onClick ={this.checkData}>check data</button>\n        <button onClick={this.pushData}>push_data</button>\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = \"https://www1.nyc.gov/assets/tlc/downloads/csv/data_reports_monthly_indicators.csv\"; // site that doesn’t send Access-Control-*\n    const request = async () => {\n      await fetch(proxyurl + url)\n      .then(res=> res.json())\n      .then(res=> console.log(res)\n         // this.setState({data:res})\n      );\n    }\n    request();    \n\n\nvar newData = [];\nvar data = [{\n    \"Month/Year\": \"2019-09\",\n    \"group\": \"blue\",\n    \"flights\": \"668620\"\n  },\n  {\n    \"Month/Year\": \"2019-10\",\n    \"group\": \"blue\",\n    \"flights\": \"662520\"\n  },\n  {\n    \"Month/Year\": \"2019-09\",\n    \"group\": \"green\",\n    \"flights\": \"662520\"\n  },\n  {\n    \"Month/Year\": \"2019-10\",\n    \"group\": \"green\",\n    \"flights\": \"678520\"\n  }\n];\n\ndata.forEach((item, index) => {\n    let temp = {};\n    let exists = newData.find(e => e.name === item['Month/Year']);\n    if (exists) { // if the date exists in the array already\n\tif (item.group === 'green') {\n            exists.gr = item.flights;\n        } else {\n    \t    exists.hv = item.flights;\n\t}\n    } else {\n        temp.name = item['Month/Year'];\n        if (item.group === 'green') {\n            temp.gr = item.flights;\n        } else {\n    \t    temp.hv = item.flights;\n\t}\n        newData.push(temp);\n    }\n});\n\nconsole.log(newData);\n.as-console-wrapper { max-height: 100% !important; top: 0; }\n\n\nlet result = [];\n    result = Object.values(my_data.reduce((r, o) => {\n      var name = o[\"Month/Year\"];\n      //var green = o[\"Green\"]\n      //var blue = o[\"Yellow\"]\n      var flights = o[\"Trips Per Day\"]\n      var group = o[\"License Class\"]\n      r[name] = r[name] || { name };\n      r[name][{ green: 'Green', blue: 'Yellow'}[o.group]] = o.flights;\n      console.log(r)\n      return r;\n\n\n\nlet result = [];\n    result = Object.values(my_data.reduce((r, o) => {\n        var name = o[\"Month/Year\"];\n        var group = o[\"License Class\"];\n        var flights = o[\"Trips Per Day\"];\n        r[name] = r[name] || { name };\n        r[name][{ Green: 'gr', Yellow: 'hv'}[o.group]] = o.flights;\n        return r;\n    }, {}));\n\n\n    //write spolution\n\nvar data = [{ \"Month/Year\": \"2019-09\", \"group one\": \"blue\", flights: \"668620\" },\n                { \"Month/Year\": \"2019-10\", \"group one\": \"blue\", flights: \"662520\" },\n                { \"Month/Year\": \"2019-09\", \"group one\": \"green one\", flights: \"662520\" },\n                { \"Month/Year\": \"2019-10\", \"group one\": \"green one\", flights: \"678520\" },\n                { \"Month/Year\": \"2019-10\", \"group one\": \"red\", flights: \"678520\" }\n              \n              ],\n    result = Object.values(data.reduce((r, o) => {\n        var name = o[\"Month/Year\"];\n        //var group = o[\"group one\"];\n        r[name] = r[name] || { name };\n        r[name][{ \"green one\": 'gr', blue: 'hv'}[o[[\"group one\"]]]] = o.flights;\n        return r;\n    }, {}));\n\n\n    var data = [{ \"Month/Year\": \"2019-09\", \"group one\": \"blue\", \"Trips Per Day\": \"668620\" },\n                { \"Month/Year\": \"2019-10\", \"group one\": \"blue\", \"Trips Per Day\": \"662520\" },\n                { \"Month/Year\": \"2019-09\", \"group one\": \"green one\", \"Trips Per Day\": \"662520\" },\n                { \"Month/Year\": \"2019-10\", \"group one\": \"green one\", \"Trips Per Day\": \"678520\" },\n                { \"Month/Year\": \"2019-10\", \"group one\": \"red\", \"Trips Per Day\": \"678520\" }\n              \n              ],\n    result = Object.values(data.reduce((r, o) => {\n        var name = o[\"Month/Year\"];\n        //var group = o[\"group one\"];\n        r[name] = r[name] || { name };\n        r[name][{ \"green one\": 'gr', blue: 'hv'}[o[[\"group one\"]]]] = o[\"Trips Per Day\"];\n        return r;\n    }, {}));\n    \n\n\n    ///////////\n\n    let result = [];\n    result = Object.values(my_data.reduce((r, o) => {\n      var name = o[\"Month/Year\"];\n      //var group = o[\"group one\"];\n      r[name] = r[name] || { name };\n      r[name][{ \"Yellow\": 'gr', \"Green\": 'hv'}[o[[\"License Class\"]]]] = o[\"Trips Per Day\"];\n      return r;\n  }, {}));\n\n////////////////////\n\n<LineChart\n        width={800}\n        height={600}\n        data={this.state.data}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"Green\" stroke={this.state.graphColors.green} activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"Yellow\" stroke={this.state.graphColors.yellow} />\n        <Line type=\"monotone\" dataKey=\"HighVolume\" stroke={this.state.graphColors.hv} />\n        <Line type=\"monotone\" dataKey=\"LuxLimo\" stroke={this.state.graphColors.lx} />\n        <Line type=\"monotone\" dataKey=\"Livery\" stroke={this.state.graphColors.lv}/>\n        <Line type=\"monotone\" dataKey=\"BlackCar\" stroke={this.state.graphColors.bc} />\n\n      </LineChart>\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}